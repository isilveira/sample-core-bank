// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleCoreBank.Infrastructures.Data.CoreBank;

#nullable disable

namespace SampleCoreBank.Infrastructures.Data.CoreBank.Migrations
{
    [DbContext(typeof(CoreBankDbContext))]
    [Migration("20251017061220_InitialMigrationCoreBankDbContext")]
    partial class InitialMigrationCoreBankDbContext
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.Conta", b =>
                {
                    b.Property<string>("DocumentoTitular")
                        .HasColumnType("NVARCHAR(11)")
                        .HasColumnName("DocumentoTitular");

                    b.Property<DateTime>("DataAbertura")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataAbertura");

                    b.Property<string>("NomeTitular")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("NomeTitular");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("Saldo");

                    b.HasKey("DocumentoTitular");

                    b.ToTable("Contas", "dbo");
                });

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.DesativacaoConta", b =>
                {
                    b.Property<string>("DocumentoTitular")
                        .HasColumnType("NVARCHAR(11)")
                        .HasColumnName("DocumentoTitular");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATETIME")
                        .HasColumnName("Data");

                    b.Property<string>("Responsavel")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(128)")
                        .HasColumnName("Responsavel");

                    b.HasKey("DocumentoTitular");

                    b.ToTable("DesativacaoContas", "dbo");
                });

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.Movimentacao", b =>
                {
                    b.Property<string>("DocumentoTitularDebitado")
                        .HasColumnType("NVARCHAR(11)")
                        .HasColumnName("DocumentoTitularDebitado");

                    b.Property<string>("DocumentoTitularCreditado")
                        .HasColumnType("NVARCHAR(11)")
                        .HasColumnName("DocumentoTitularCreditado");

                    b.Property<decimal>("Valor")
                        .HasColumnType("DECIMAL(18,2)")
                        .HasColumnName("Valor");

                    b.Property<DateTime>("DataOperacao")
                        .HasColumnType("DATETIME")
                        .HasColumnName("DataOperacao");

                    b.HasKey("DocumentoTitularDebitado", "DocumentoTitularCreditado", "Valor", "DataOperacao");

                    b.HasIndex("DocumentoTitularCreditado");

                    b.ToTable("Movimentacoes", "dbo");
                });

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.DesativacaoConta", b =>
                {
                    b.HasOne("SampleCoreBank.Core.Domain.CoreBank.Entities.Conta", "Conta")
                        .WithOne("DesativacaoConta")
                        .HasForeignKey("SampleCoreBank.Core.Domain.CoreBank.Entities.DesativacaoConta", "DocumentoTitular")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Conta");
                });

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.Movimentacao", b =>
                {
                    b.HasOne("SampleCoreBank.Core.Domain.CoreBank.Entities.Conta", "ContaCreditada")
                        .WithMany("MovimentacoesCreditadas")
                        .HasForeignKey("DocumentoTitularCreditado")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SampleCoreBank.Core.Domain.CoreBank.Entities.Conta", "ContaDebitada")
                        .WithMany("MovimentacoesDebitadas")
                        .HasForeignKey("DocumentoTitularDebitado")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ContaCreditada");

                    b.Navigation("ContaDebitada");
                });

            modelBuilder.Entity("SampleCoreBank.Core.Domain.CoreBank.Entities.Conta", b =>
                {
                    b.Navigation("DesativacaoConta")
                        .IsRequired();

                    b.Navigation("MovimentacoesCreditadas");

                    b.Navigation("MovimentacoesDebitadas");
                });
#pragma warning restore 612, 618
        }
    }
}
